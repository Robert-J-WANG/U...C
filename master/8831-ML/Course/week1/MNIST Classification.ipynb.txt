{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e3128d29-741c-4138-881c-82bbf1e25cc1",
   "metadata": {},
   "source": [
    "## MNIST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9049a47f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install numpy scikit-learn matplotlib"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5adac182",
   "metadata": {},
   "source": [
    "### Randon Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "95cbbbdf-24ad-47a4-82a0-0e27c4c3e042",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification report for classifier RandomForestClassifier(n_jobs=-1, random_state=42):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.99      0.99        89\n",
      "           1       0.96      1.00      0.98        91\n",
      "           2       0.98      0.99      0.98        88\n",
      "           3       0.98      0.99      0.98        92\n",
      "           4       0.98      1.00      0.99        91\n",
      "           5       0.99      0.97      0.98        91\n",
      "           6       0.99      0.98      0.98        91\n",
      "           7       0.99      0.99      0.99        89\n",
      "           8       0.98      0.92      0.95        87\n",
      "           9       0.97      0.98      0.97        90\n",
      "\n",
      "    accuracy                           0.98       899\n",
      "   macro avg       0.98      0.98      0.98       899\n",
      "weighted avg       0.98      0.98      0.98       899\n",
      "\n",
      "\n",
      "Confusion Matrix:\n",
      " [[88  0  0  0  1  0  0  0  0  0]\n",
      " [ 0 91  0  0  0  0  0  0  0  0]\n",
      " [ 0  1 87  0  0  0  0  0  0  0]\n",
      " [ 0  0  0 91  0  0  0  1  0  0]\n",
      " [ 0  0  0  0 91  0  0  0  0  0]\n",
      " [ 0  0  0  0  0 88  1  0  0  2]\n",
      " [ 0  0  0  0  0  1 89  0  1  0]\n",
      " [ 0  0  0  0  1  0  0 88  0  0]\n",
      " [ 0  3  2  1  0  0  0  0 80  1]\n",
      " [ 0  0  0  1  0  0  0  0  1 88]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 720x216 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjwAAACmCAYAAADebVWWAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAAAO+UlEQVR4nO3dfYxld13H8c+nXenTwt4ttEG2251AbbU17owaoFZkINASFGeoRIw1makRSyTWGVNsIw07CpKmop0EoiWE7qwCIsQyQ4z1D9SZWAqKZe+WoJSWdNpulzYty90+uFLb/frHOVtvJ/P4O/fxd9+v5Gbvved8z++ce7977mfPuXuPI0IAAAA5O6XbKwAAANBuBB4AAJA9Ag8AAMgegQcAAGSPwAMAALJH4AEAANnLPvDYnrP94fL+G2zf26Fxw/YFnRgL7UcfoSp6CK1AH6XricBje9n2cdtP236sfEO3t3qciPjXiLhoE+szafvOVo+/wZhvsf0N28/YPmz7Vzs5fg4GvY9s32z7YdtP2n7Q9h92auxc0EOes/1suf0nb6d2avxc0Ee92Uc9EXhK74iI7ZJ+WtLPSrpx5Qy2t3V8rTrA9sWSPivpA5J2SNor6e6urlT/Gtg+kvQpST8eES+T9HOSrrJ9ZZfXqR8Ncg9J0s0Rsb3p9ny3V6hP0Uc91ke9FHgkSRHxiKQ7JP2k9MJhtPfZvk/SfeVzv2S7brth+y7bP3Wy3vZIeaTkKdt/K+n0pmmjtg83Pd5t+3bbj9v+vu2P2/4JSbdKurRMpY1y3tNsf9T2Q2Viv9X2GU3Ler/t79k+Yvs3t7jZN0r6RETcERHPRcT3I+K7W1wGmgxiH0XEvRHxTNNTJyT19SHobhrEHkLr0Ue9o+cCj+3dkt4u6WDT0+OSXifpYtsjkm6TdI2kl0v6hKQvlW/eSyTNS/prSWdL+oKkX1ljnFMl/b2kByUNSdol6XMR8V+S3ivpq2UqrZUlN0m6UNKwig+RXZI+WC7rbZKuk/RWST8m6S0rxvp12/ess9mvL+f7Ztlgn7Z99jrzYwMD2keyfYPtpyUdlnSWiiOHSDCoPSTpd2wftX237VXXGZtHH/VQH0VE12+SliU9Lamh4s36C0lnlNNC0pub5v1LSR9aUX+vpDdK+gVJRyS5adpdkj5c3h+VdLi8f6mkxyVtW2V9JiXd2fTYkp6R9Jqm5y6V9EB5/zZJNzVNu7Bc7ws2uf3Plq/BhZK2S/o7SZ/p9vvSb7dB76MV44xI+iNJL+32+9JPt0HvIRWnX14uaZuKD+mnJF3W7fel3270UW/2US+dPxyPiC+vMe3hpvt7JE3Y/t2m514i6VUq3pBHonzFSw+usczdkh6MiOc2sW7nSDpT0t22Tz5nSSe/hPUqvfg7N2uNuZbjkvZHxHckyfZHJK31WmB9g9xHkqRyvQ/avkJF6Pn9lOUMsIHtoYj4RtPDf7D9GUlXSvrKVpYDSfTRST3TRz13SmsNzW/2w5L+JCJqTbczI+JvJH1P0i43vYOSzl9jmQ9LOt+rf2ls5SXkn1ARSi5pGnNHFF9IUznu7k2MuZZ7VozJJezbI/c+WmmbpNdUXAZebNB6KFR8EKK16KMu6JfA0+yTkt5r+3UunGX7F22/VNJXJT0n6VrbP+Lif6i8do3l/LuKN/Wmchmn276snPaYpPPK86eKiBPluLfYPleSbO8q/wUtSZ+XNGn7YttnStq3xW3aL+lq268u629QcS4W7ZNVH9k+xfY1tneW2/NaSe+T9E9beE2wNVn1ULmsd9neXvbT5ZJ+Q9KXtrIMbBl91CF9F3gi4j8kvUfSxyX9QNL9Ks5PKiKeVXHYbFLSUUnvlnT7Gst5XtI7VHxZ6yEVX/J8dzn5nyV9S9Kjtp8on7u+HOtrtp9UccrponJZd0iaLevuL/98ge2rbH9rnW26TdJfSfo3FYcOfyjp2g1fDCTLsY8kvVPSd1WcL/+0pI+VN7RBpj30e5IeUfHdkz+V9J6IWFz3hUAl9FHn+MWnBgEAAPLTd0d4AAAAtorAAwAAskfgAQAA2SPwAACA7BF4AABA9vo68PjFl54/Yft40+OrOrwu59j+rO1jtn/g4pcl0Qd6pY9sv8nF9dQaLi7890Xbuzo1PtL1UA+NluM3r89Ep8ZHNfRRe/XSpSW2rOlXIWV7WdJvrfZT3ra3bfLntqu4XdLXVfwi5X+rvDIuel8P9dF/SroiIo7YPk3Sh1RcZ+eX2zgmWqCHekiSjkTEeW0eA21AH7VXXx/hWUuZTg/bvt72o5L22560feeK+cL2BeX902x/1PZDth+zfavtMzY53uUqfob7/RFxLCL+NyIOblSH3tbpPoqIxyLiSNNTz6v4ETH0qU73EPJEH7VGloGn9EpJZ6u4MNtvb2L+m1RcEXZYxYfMLkkfPDmxPM3w82vUvl7F1W0PlKcivm77jRXWHb2jk30k2+fbbqi4zs11km5OXXH0jI72kKRzyw+4B2zfYvus5DVHL6GPKso58JyQtC8ifhgRx9eb0bZVNNB0RByNiKckfUTSr52cp7y42p1rLOI8SZdL+hcVTflnkhZsv6IF24Hu6mQfKSIeioiapFdIulHSt1uwDeiuTvbQt1V8wP2opDdL+hlJf159E9AD6KOK+vo7PBt4PCL+Z5PzniPpTEl3+/8vSmtJp26y/rik5Yj4VPn4c7Y/IOkySQubXAZ6Uyf76AURcdT2AUmHbO/qwPl6tE/HeigiHpX0aPnwAdt/oOJCxNdsfnXRo+ijinIOPCsvEvaMigaQJNl+ZdO0J1SElksi4pGEse5RcdG29cZHf+pkH620TdK5kl6m4sKB6E/d7KFQ3kfyBwl9VFHfb8AWHJJ0ie1h26dLmjk5ISJOSPqkpFtsnytJtnfZvmKTy/6ipJ22J2yfavtdKk5zfaWlW4Be0LY+sn2l7Ytsn2L7HBWHkA9GBGEnL+3soTfZ3uPCbhXf4+Aoc57ooy0amMATEd+R9MeSvizpPkkrz11eL+l+SV+z/WQ530UnJ7r4HYI3rLHsoyr+6/B1ko5JukHSWEQ80ertQHe1s49UfKnwHyU9JembKs7Zv7OlG4Cua3MPjUi6S8W//u9S0UfXtnQD0BPoo61zBGdeAABA3gbmCA8AABhcBB4AAJA9Ag8AAMgegQcAAGRvo9/h6co3mhcXFyvVj4+PJ9fOz88n146OjibXdpk3nqWS5D5qNBrJg1bpA0laWlpKrt27d29ybZUeHBoaSq5tgXb2UVd6qOrf6eXl5eTa4eHhSmOnmp6erlQ/NjZWpbxn90VVVN0XVenDKvuTer2eXFul9yWpVqtVKV+1jzjCAwAAskfgAQAA2SPwAACA7BF4AABA9gg8AAAgewQeAACQPQIPAADIHoEHAABkj8ADAACyR+ABAADZI/AAAIDsEXgAAED2CDwAACB7BB4AAJC9bd1egdVUuZy9JB07diy5dmhoqNLYaK2lpaXk2uXl5Upj79+/P7l2dnY2uXZycjK5dnFxMbk2V/V6Pbn20KFDlcbet29fpfpUVfZjY2NjrVuRjDQajeTahYWFSmNX6eHx8fHk2ir7olqtllzbLhzhAQAA2SPwAACA7BF4AABA9gg8AAAgewQeAACQPQIPAADIHoEHAABkj8ADAACyR+ABAADZI/AAAIDsEXgAAED2CDwAACB7BB4AAJA9Ag8AAMieI2K96etObBfbleonJiaSa+fm5iqN3aeqveAb60ofVVWv15NrR0dHk2tnZmaSa6emppJrW6CdfZTcQ7Ozs8mDVt0fVOmhAdWz+6Iqfy8XFxeTa1tRP4BW7SOO8AAAgOwReAAAQPYIPAAAIHsEHgAAkD0CDwAAyB6BBwAAZI/AAwAAskfgAQAA2SPwAACA7BF4AABA9gg8AAAgewQeAACQPQIPAADIHoEHAABkj8ADAACyt61dC56bm2vXojc0NTXVtbHRO5aXlyvVj4yMJNfu27cvuZb+ba1Go5FcW7WHhoeHuzL2zMxMci39t7oq+4Oqn4e1Wq1SfaoDBw4k146NjbVwTVqDIzwAACB7BB4AAJA9Ag8AAMgegQcAAGSPwAMAALJH4AEAANkj8AAAgOwReAAAQPYIPAAAIHsEHgAAkD0CDwAAyB6BBwAAZI/AAwAAskfgAQAA2XNErDd93YnrmZycTC3V/Px8cq0kjY6OJtcuLCwk1+7duze5dnZ2NrlWqrbNklxp8I0l91EVjUajUv34+Hhy7dLSUnLt2NhYcu3c3FxyrSTVarUq5e3so+QeqtIHVfdFO3fuTK49ePBgcu3i4mJXalugZ/dF3eyjoaGh5Noq+4Qq+4Oqn2kVrdpHHOEBAADZI/AAAIDsEXgAAED2CDwAACB7BB4AAJA9Ag8AAMgegQcAAGSPwAMAALJH4AEAANkj8AAAgOwReAAAQPYIPAAAIHsEHgAAkD0CDwAAyJ4jYr3p605cT5VLw09PTyfXVjU2NpZcW6/XW7ciW7S8vFyl3C1ajbUk91G/WlhYSK6dmJhIrp2ZmUmulaSpqakq5e3so4HrodHR0eTaWq2WXDs/P59c2wLsi1pscXExubbK53gv9hFHeAAAQPYIPAAAIHsEHgAAkD0CDwAAyB6BBwAAZI/AAwAAskfgAQAA2SPwAACA7BF4AABA9gg8AAAgewQeAACQPQIPAADIHoEHAABkj8ADAACyt61dCx4fH0+unZ6erjT22NhYcu3VV1+dXDsxMZFcOzw8nFyL1c3NzVWqn5ycTK7dsWNHcm2tVkuuRWstLy9Xqq+yH2w0Gsm19Xo9uRatV2VfUrV+amoqubZK//YijvAAAIDsEXgAAED2CDwAACB7BB4AAJA9Ag8AAMgegQcAAGSPwAMAALJH4AEAANkj8AAAgOwReAAAQPYIPAAAIHsEHgAAkD0CDwAAyB6BBwAAZI/AAwAAsueIWG/6uhPbpV6vV6ofGRlpzYps0Z49e5Jr5+fnK409PDxcpdyVBt9YV/rIbvdmrW3Hjh3JtVNTU12plaRarValvJ0veHIPVdmfjI+PJ9dK0ujoaHLt7Oxscm3F97GbstwXVekDSVpaWkqunZiYSK7t4x5ctY84wgMAALJH4AEAANkj8AAAgOwReAAAQPYIPAAAIHsEHgAAkD0CDwAAyB6BBwAAZI/AAwAAskfgAQAA2SPwAACA7BF4AABA9gg8AAAgewQeAACQPUdEt9cBAACgrTjCAwAAskfgAQAA2SPwAACA7BF4AABA9gg8AAAgewQeAACQvf8DTemVycdohJwAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 720x216 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import datasets\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "\n",
    "# Load the dataset (MNIST)\n",
    "digits = datasets.load_digits()\n",
    "\n",
    "# Display the first 4 images and labels\n",
    "_, axes = plt.subplots(1, 4, figsize=(10, 3))\n",
    "for ax, image, label in zip(axes, digits.images, digits.target):\n",
    "    ax.set_axis_off()\n",
    "    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')\n",
    "    ax.set_title('Training: %i' % label)\n",
    "\n",
    "# Data preparation\n",
    "# Flatten the images\n",
    "n_samples = len(digits.images)\n",
    "data = digits.images.reshape((n_samples, -1))\n",
    "\n",
    "# Split data into training and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(data, digits.target, test_size=0.5, stratify=digits.target, random_state=123)\n",
    "\n",
    "# Create and train the Random Forest classifier\n",
    "# The number of trees in the forest is set to 100, and `n_jobs=-1` uses all processors for parallelism\n",
    "random_forest = RandomForestClassifier(n_estimators=100, n_jobs=-1, random_state=42)\n",
    "random_forest.fit(X_train, y_train)\n",
    "\n",
    "# Predictions\n",
    "y_pred = random_forest.predict(X_test)\n",
    "\n",
    "# Evaluation\n",
    "print(\"Classification report for classifier %s:\\n%s\\n\"\n",
    "      % (random_forest, classification_report(y_test, y_pred)))\n",
    "print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n",
    "\n",
    "# Display some predictions\n",
    "_, axes = plt.subplots(1, 4, figsize=(10, 3))\n",
    "for ax, image, prediction, true_label in zip(axes, X_test.reshape(-1, 8, 8), y_pred, y_test):\n",
    "    ax.set_axis_off()\n",
    "    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')\n",
    "    ax.set_title(f'Predicted: {prediction}\\nTrue: {true_label}')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1e7d5bbd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1080x432 with 10 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Filtering out incorrect predictions\n",
    "incorrect_predictions = [(image, prediction, true_label) for image, prediction, true_label in zip(X_test.reshape(-1, 8, 8), y_pred, y_test) if prediction != true_label]\n",
    "\n",
    "# Display incorrect predictions - adjusting to display the first 10 examples\n",
    "_, axes = plt.subplots(2, 5, figsize=(15, 6)) # Adjusted for a 2x5 grid to fit 10 examples\n",
    "for ax, (image, prediction, true_label) in zip(axes.flat, incorrect_predictions[:10]):\n",
    "    ax.set_axis_off()\n",
    "    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')\n",
    "    ax.set_title(f'Pred: {prediction}, True: {true_label}', color='red')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "311b263f",
   "metadata": {},
   "source": [
    "### SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "48f8c7cb-c4be-42ac-a25b-881402d8e1f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification report for classifier SVC(random_state=42):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.99      0.99        89\n",
      "           1       0.94      1.00      0.97        91\n",
      "           2       1.00      1.00      1.00        88\n",
      "           3       1.00      0.99      0.99        92\n",
      "           4       0.99      1.00      0.99        91\n",
      "           5       1.00      0.97      0.98        91\n",
      "           6       0.99      0.99      0.99        91\n",
      "           7       0.99      0.99      0.99        89\n",
      "           8       0.99      0.94      0.96        87\n",
      "           9       0.97      0.99      0.98        90\n",
      "\n",
      "    accuracy                           0.99       899\n",
      "   macro avg       0.99      0.99      0.99       899\n",
      "weighted avg       0.99      0.99      0.99       899\n",
      "\n",
      "\n",
      "Confusion Matrix:\n",
      " [[88  0  0  0  1  0  0  0  0  0]\n",
      " [ 0 91  0  0  0  0  0  0  0  0]\n",
      " [ 0  0 88  0  0  0  0  0  0  0]\n",
      " [ 0  0  0 91  0  0  0  1  0  0]\n",
      " [ 0  0  0  0 91  0  0  0  0  0]\n",
      " [ 0  0  0  0  0 88  1  0  0  2]\n",
      " [ 0  1  0  0  0  0 90  0  0  0]\n",
      " [ 0  0  0  0  0  0  0 88  0  1]\n",
      " [ 0  5  0  0  0  0  0  0 82  0]\n",
      " [ 0  0  0  0  0  0  0  0  1 89]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 720x216 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1440x720 with 20 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import datasets\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "\n",
    "# Load the dataset (MNIST)\n",
    "digits = datasets.load_digits()\n",
    "\n",
    "# Display the first 4 images and labels\n",
    "_, axes = plt.subplots(1, 4, figsize=(10, 3))\n",
    "for ax, image, label in zip(axes, digits.images, digits.target):\n",
    "    ax.set_axis_off()\n",
    "    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')\n",
    "    ax.set_title('Training: %i' % label)\n",
    "\n",
    "# Data preparation\n",
    "# Flatten the images\n",
    "n_samples = len(digits.images)\n",
    "data = digits.images.reshape((n_samples, -1))\n",
    "\n",
    "# Split data into training and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(data, digits.target, test_size=0.5, stratify=digits.target, random_state=123)\n",
    "\n",
    "# Create and train the SVM classifier\n",
    "# The 'gamma' parameter is set to 'scale' as it can automatically adjust to the data range\n",
    "svm_classifier = SVC(gamma='scale', random_state=42)\n",
    "svm_classifier.fit(X_train, y_train)\n",
    "\n",
    "# Predictions\n",
    "y_pred = svm_classifier.predict(X_test)\n",
    "\n",
    "# Evaluation\n",
    "print(\"Classification report for classifier %s:\\n%s\\n\"\n",
    "      % (svm_classifier, classification_report(y_test, y_pred)))\n",
    "print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n",
    "\n",
    "# Display some predictions - adjusting to display 20 examples\n",
    "_, axes = plt.subplots(4, 5, figsize=(20, 10)) # Adjusted for a 4x5 grid\n",
    "images_and_predictions = list(zip(X_test.reshape(-1, 8, 8), y_pred, y_test))\n",
    "for ax, (image, prediction, true_label) in zip(axes.flat, images_and_predictions[:20]):\n",
    "    ax.set_axis_off()\n",
    "    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')\n",
    "    ax.set_title(f'Pred: {prediction}, True: {true_label}')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7e1e9541-5dca-43b8-a0c6-d6e6f5c7c029",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1080x432 with 10 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Filtering out incorrect predictions\n",
    "incorrect_predictions = [(image, prediction, true_label) for image, prediction, true_label in zip(X_test.reshape(-1, 8, 8), y_pred, y_test) if prediction != true_label]\n",
    "\n",
    "# Display incorrect predictions - adjusting to display the first 10 examples\n",
    "_, axes = plt.subplots(2, 5, figsize=(15, 6)) # Adjusted for a 2x5 grid to fit 10 examples\n",
    "for ax, (image, prediction, true_label) in zip(axes.flat, incorrect_predictions[:10]):\n",
    "    ax.set_axis_off()\n",
    "    ax.imshow(image, cmap=plt.cm.gray_r, interpolation='nearest')\n",
    "    ax.set_title(f'Pred: {prediction}, True: {true_label}', color='red')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5bea48b",
   "metadata": {},
   "source": [
    "### CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9a5144eb-f59a-4b4f-b0a8-6a3a712410ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install tensorflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f3ecc65b-4f50-4f22-bd1b-773c3272e73e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "844/844 [==============================] - 15s 17ms/step - loss: 0.1991 - accuracy: 0.9414 - val_loss: 0.0528 - val_accuracy: 0.9863\n",
      "Epoch 2/5\n",
      "844/844 [==============================] - 14s 16ms/step - loss: 0.0544 - accuracy: 0.9830 - val_loss: 0.0410 - val_accuracy: 0.9883\n",
      "Epoch 3/5\n",
      "844/844 [==============================] - 14s 16ms/step - loss: 0.0382 - accuracy: 0.9878 - val_loss: 0.0380 - val_accuracy: 0.9887\n",
      "Epoch 4/5\n",
      "844/844 [==============================] - 14s 16ms/step - loss: 0.0298 - accuracy: 0.9900 - val_loss: 0.0329 - val_accuracy: 0.9910\n",
      "Epoch 5/5\n",
      "844/844 [==============================] - 14s 16ms/step - loss: 0.0241 - accuracy: 0.9924 - val_loss: 0.0361 - val_accuracy: 0.9910\n",
      "313/313 [==============================] - 1s 3ms/step - loss: 0.0298 - accuracy: 0.9912\n",
      "Test accuracy: 0.9911999702453613\n",
      "1/1 [==============================] - 0s 103ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1440x144 with 10 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from tensorflow.keras import layers, models\n",
    "from tensorflow.keras.datasets import mnist\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "# Load the MNIST dataset\n",
    "(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n",
    "\n",
    "# Preprocess the data by reshaping and normalizing\n",
    "train_images = train_images.reshape((60000, 28, 28, 1)).astype('float32') / 255\n",
    "test_images = test_images.reshape((10000, 28, 28, 1)).astype('float32') / 255\n",
    "\n",
    "# Convert labels to one-hot encoding\n",
    "train_labels = to_categorical(train_labels)\n",
    "test_labels = to_categorical(test_labels)\n",
    "\n",
    "# Define the neural network architecture\n",
    "model = models.Sequential()\n",
    "model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\n",
    "model.add(layers.MaxPooling2D((2, 2)))\n",
    "model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(layers.MaxPooling2D((2, 2)))\n",
    "model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(layers.Flatten())\n",
    "model.add(layers.Dense(64, activation='relu'))\n",
    "model.add(layers.Dense(10, activation='softmax'))\n",
    "\n",
    "# Compile the model\n",
    "model.compile(optimizer='adam',\n",
    "              loss='categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "# Train the model\n",
    "model.fit(train_images, train_labels, epochs=5, batch_size=64, validation_split=0.1)\n",
    "\n",
    "# Evaluate the model\n",
    "test_loss, test_acc = model.evaluate(test_images, test_labels)\n",
    "print(f\"Test accuracy: {test_acc}\")\n",
    "\n",
    "# Predictions for the first 10 images in the test set\n",
    "predictions = model.predict(test_images[:10])\n",
    "predicted_labels = np.argmax(predictions, axis=1)\n",
    "\n",
    "# Display the first 10 test images and their predicted labels\n",
    "_, axes = plt.subplots(1, 10, figsize=(20, 2))\n",
    "for ax, image, prediction in zip(axes, test_images[:10], predicted_labels):\n",
    "    ax.set_axis_off()\n",
    "    ax.imshow(image.reshape(28,28), cmap=plt.cm.gray_r, interpolation='nearest')\n",
    "    ax.set_title(f'Predicted: {prediction}')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "704ee2d1-19b0-4f41-83bd-206336d8475b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No incorrect predictions in the first 10 test images.\n",
      "313/313 [==============================] - 1s 3ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1080x432 with 10 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Actual labels for the first 10 images in the test set\n",
    "actual_labels = np.argmax(test_labels[:10], axis=1)\n",
    "\n",
    "# Find incorrect predictions\n",
    "incorrect_indices = [i for i, (pred, actual) in enumerate(zip(predicted_labels, actual_labels)) if pred != actual]\n",
    "\n",
    "# Display incorrect predictions\n",
    "if incorrect_indices:\n",
    "    _, axes = plt.subplots(1, len(incorrect_indices), figsize=(2 * len(incorrect_indices), 4))\n",
    "    if len(incorrect_indices) == 1: # If there's only one incorrect prediction, we need to treat the axes array differently\n",
    "        axes = [axes]\n",
    "    for ax, idx in zip(axes, incorrect_indices):\n",
    "        ax.imshow(test_images[idx].reshape(28,28), cmap=plt.cm.gray_r, interpolation='nearest')\n",
    "        ax.set_title(f'Pred: {predicted_labels[idx]}\\nTrue: {actual_labels[idx]}')\n",
    "        ax.set_axis_off()\n",
    "else:\n",
    "    print(\"No incorrect predictions in the first 10 test images.\")\n",
    "\n",
    "plt.show()\n",
    "\n",
    "# For a more comprehensive analysis, let's find and display the first 10 incorrect predictions in the entire test set\n",
    "predictions_full = model.predict(test_images)\n",
    "predicted_labels_full = np.argmax(predictions_full, axis=1)\n",
    "actual_labels_full = np.argmax(test_labels, axis=1)\n",
    "\n",
    "incorrect_indices_full = [i for i, (pred, actual) in enumerate(zip(predicted_labels_full, actual_labels_full)) if pred != actual]\n",
    "\n",
    "# Display the first 10 incorrect predictions from the entire test set\n",
    "_, axes = plt.subplots(2, 5, figsize=(15, 6))\n",
    "for ax, idx in zip(axes.flat, incorrect_indices_full[:10]):\n",
    "    ax.imshow(test_images[idx].reshape(28,28), cmap=plt.cm.gray_r, interpolation='nearest')\n",
    "    ax.set_title(f'Pred: {predicted_labels_full[idx]}\\nTrue: {actual_labels_full[idx]}', color='red')\n",
    "    ax.set_axis_off()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcff1a18-ea39-40d2-8641-dc2e41f16998",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce6ea0b7-a07e-4e1c-9f62-e790c5aeea43",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ff2f6c0-0659-45b4-a2e4-143cd98082ff",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "099ab68e-f20a-4335-8598-d5dcfd468c4d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30ac2cd4-039d-4ffe-be04-a5c04dbb0b03",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
